const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const port = 3000;

// Middleware
app.use(bodyParser.json());

// MySQL connection
const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: 'arjun',  // replace with your MySQL password
    database: 'learning',  // your database name
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// Authentication middleware
const authenticate = (req, res, next) => {
    const token = req.header('Authorization');
    if (!token) return res.status(403).json({ error: 'Access denied' });

    jwt.verify(token, 'your_jwt_secret', (err, user) => {
        if (err) return res.status(403).json({ error: 'Invalid token' });
        req.user = user;
        next();
    });
};

// User Registration (Sign up)
app.post('/signup', async (req, res) => {
    const { username, password, email, role } = req.body;

    if (!username || !password || !email || !role) {
        return res.status(400).json({ error: 'Username, password, email, and role are required' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const sql = 'INSERT INTO users (username, password, email, role) VALUES (?, ?, ?, ?)';
    try {
        const [result] = await pool.promise().query(sql, [username, hashedPassword, email, role]);
        res.status(201).json({ message: 'User created', user_id: result.insertId });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// User Login (returns JWT)
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    if (!username || !password) {
        return res.status(400).json({ error: 'Username and password are required' });
    }

    const sql = 'SELECT * FROM users WHERE username = ?';
    try {
        const [rows] = await pool.promise().query(sql, [username]);
        const user = rows[0];
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(400).json({ error: 'Invalid password' });
        }

        const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, 'your_jwt_secret', { expiresIn: '1h' });
        res.json({ message: 'Login successful', token });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Instructor adds a course
app.post('/courses', authenticate, async (req, res) => {
    const { title, description } = req.body;
    const { id, role } = req.user;  // user ID from JWT token

    if (role !== 'instructor') {
        return res.status(403).json({ error: 'Only instructors can add courses' });
    }

    if (!title || !description) {
        return res.status(400).json({ error: 'Course title and description are required' });
    }

    const sql = 'INSERT INTO courses (title, description, instructor_id) VALUES (?, ?, ?)';
    try {
        const [result] = await pool.promise().query(sql, [title, description, id]);
        res.status(201).json({ message: 'Course created', course_id: result.insertId });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Fetch all courses
app.get('/courses', async (req, res) => {
    const sql = 'SELECT * FROM courses';
    try {
        const [courses] = await pool.promise().query(sql);
        res.json(courses);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Add a discussion comment
app.post('/discussions', authenticate, async (req, res) => {
    const { course_id, content } = req.body;
    const { id } = req.user;  // user ID from JWT token

    if (!course_id || !content) {
        return res.status(400).json({ error: 'Course ID and content are required' });
    }

    const sql = 'INSERT INTO discussions (course_id, user_id, content) VALUES (?, ?, ?)';
    try {
        const [result] = await pool.promise().query(sql, [course_id, id, content]);
        res.status(201).json({ message: 'Discussion added', discussion_id: result.insertId });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Fetch discussions for a course
app.get('/discussions/:courseId', async (req, res) => {
    const { courseId } = req.params;
    const sql = 'SELECT d.content, d.created_at, u.username FROM discussions d JOIN users u ON d.user_id = u.id WHERE d.course_id = ? ORDER BY d.created_at DESC';
    try {
        const [discussions] = await pool.promise().query(sql, [courseId]);
        res.json(discussions);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});

/**
 -- Create Users table for students and instructors
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('student', 'instructor') NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Courses table for storing courses added by instructors
CREATE TABLE courses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    instructor_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (instructor_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create Discussions table for students and instructors to post comments
CREATE TABLE discussions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT NOT NULL,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert sample users (1 instructor, 2 students)
INSERT INTO users (username, password, role, email) VALUES 
('john_instructor', 'hashed_password_here', 'instructor', 'john@example.com'),
('alice_student', 'hashed_password_here', 'student', 'alice@example.com'),
('bob_student', 'hashed_password_here', 'student', 'bob@example.com');

-- Insert a sample course (added by instructor)
INSERT INTO courses (title, description, instructor_id) VALUES 
('Web Development 101', 'Introduction to web development using HTML, CSS, and JavaScript', 1);

-- Insert sample discussion comments
INSERT INTO discussions (course_id, user_id, content) VALUES
(1, 2, 'This course is really informative!'),
(1, 3, 'I am excited to learn web development.');

 */

a. Login (POST /login)
URL: http://localhost:3000/login
Method: POST
Headers:
Content-Type: application/json
Body:
json
Copy code
{
  "username": "student_username",
  "password": "student_password"
}

b. Instructor Adding Course (POST /courses)
URL: http://localhost:3000/courses
Method: POST
Headers:
Authorization: Bearer <your_token_here>
Content-Type: application/json
{
  "title": "New Course",
  "description": "This is a description of the new course"
}

c. Fetch Discussion Forum (GET /forum)
URL: http://localhost:3000/forum
Method: GET
Headers:
Authorization: Bearer <your_token_here>
